#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./health-check.sh

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVER_IP="185.179.83.236"
SERVER_USER="root"
DOMAIN="contract.alnilam.by"
SSH_KEY="~/.ssh/id_rsa_deploy"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è${NC}"
echo -e "${YELLOW}–°–µ—Ä–≤–µ—Ä: ${SERVER_IP}${NC}"
echo -e "${YELLOW}–î–æ–º–µ–Ω: ${DOMAIN}${NC}"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
check_ssh_connection() {
    echo -e "${YELLOW}üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...${NC}"
    if ssh -i ${SSH_KEY} -o ConnectTimeout=10 -o BatchMode=yes ${SERVER_USER}@${SERVER_IP} exit 2>/dev/null; then
        echo -e "${GREEN}‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
        return 0
    else
        echo -e "${RED}‚ùå SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
check_docker_services() {
    echo -e "${YELLOW}üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    
    if ! check_ssh_connection; then
        return 1
    fi
    
    ssh -i ${SSH_KEY} ${SERVER_USER}@${SERVER_IP} << 'EOF'
        cd /opt/contract-app
        if [ -f "docker-compose.prod.yaml" ]; then
            echo "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
            docker-compose -f docker-compose.prod.yaml ps
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
            docker stats --no-stream --format 'table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}'
        else
            echo "Docker Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
EOF
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
check_web_services() {
    echo -e "${YELLOW}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP (–¥–æ–ª–∂–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ HTTPS)
    echo -e "${YELLOW}  HTTP (–ø–æ—Ä—Ç 80)...${NC}"
    if curl -s -o /dev/null -w "%{http_code}" "http://${DOMAIN}" | grep -q "301\|302"; then
        echo -e "${GREEN}  ‚úÖ HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "${RED}  ‚ùå HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
    echo -e "${YELLOW}  HTTPS (–ø–æ—Ä—Ç 443)...${NC}"
    if curl -s -o /dev/null -w "%{http_code}" "https://${DOMAIN}" | grep -q "200"; then
        echo -e "${GREEN}  ‚úÖ HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "${RED}  ‚ùå HTTPS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    echo -e "${YELLOW}  API endpoint...${NC}"
    if curl -s -o /dev/null -w "%{http_code}" "https://${DOMAIN}/api" | grep -q "200\|401\|404"; then
        echo -e "${GREEN}  ‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
    else
        echo -e "${RED}  ‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Health Check
    echo -e "${YELLOW}  Health Check...${NC}"
    if curl -s -o /dev/null -w "%{http_code}" "https://${DOMAIN}/health" | grep -q "200"; then
        echo -e "${GREEN}  ‚úÖ Health Check —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "${RED}  ‚ùå Health Check –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
check_ssl_certificates() {
    echo -e "${YELLOW}üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    CERT_EXPIRY=$(echo | openssl s_client -servername ${DOMAIN} -connect ${DOMAIN}:443 2>/dev/null | openssl x509 -noout -dates | grep "notAfter")
    
    if [ ! -z "$CERT_EXPIRY" ]; then
        echo -e "${GREEN}  ‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω${NC}"
        echo -e "${BLUE}  üìÖ $CERT_EXPIRY${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
        EXPIRY_DATE=$(echo "$CERT_EXPIRY" | sed 's/notAfter=//')
        EXPIRY_EPOCH=$(date -j -f "%b %d %H:%M:%S %Y %Z" "$EXPIRY_DATE" +%s 2>/dev/null || date -d "$EXPIRY_DATE" +%s 2>/dev/null)
        CURRENT_EPOCH=$(date +%s)
        DAYS_LEFT=$(( ($EXPIRY_EPOCH - $CURRENT_EPOCH) / 86400 ))
        
        if [ $DAYS_LEFT -gt 30 ]; then
            echo -e "${GREEN}  ‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ $DAYS_LEFT –¥–Ω–µ–π${NC}"
        elif [ $DAYS_LEFT -gt 7 ]; then
            echo -e "${YELLOW}  ‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_LEFT –¥–Ω–µ–π${NC}"
        else
            echo -e "${RED}  ‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_LEFT –¥–Ω–µ–π!${NC}"
        fi
    else
        echo -e "${RED}  ‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
    for port in 22 80 443 8000; do
        if nc -z -w5 ${SERVER_IP} ${port} 2>/dev/null; then
            echo -e "${GREEN}  ‚úÖ –ü–æ—Ä—Ç ${port} –æ—Ç–∫—Ä—ã—Ç${NC}"
        else
            echo -e "${RED}  ‚ùå –ü–æ—Ä—Ç ${port} –∑–∞–∫—Ä—ã—Ç${NC}"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
check_disk_space() {
    echo -e "${YELLOW}üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...${NC}"
    
    if check_ssh_connection; then
        ssh -i ${SSH_KEY} ${SERVER_USER}@${SERVER_IP} << 'EOF'
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:"
            df -h | grep -E '^/dev/'
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker:"
            docker system df
EOF
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs() {
    echo -e "${YELLOW}üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏...${NC}"
    
    if check_ssh_connection; then
        ssh -i ${SSH_KEY} ${SERVER_USER}@${SERVER_IP} << 'EOF'
            cd /opt/contract-app
            echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:"
            docker-compose -f docker-compose.prod.yaml logs --tail=50 | grep -i "error\|exception\|fail" | tail -10 || echo "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
EOF
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
main() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}    –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´    ${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_ssh_connection
    echo ""
    
    check_ports
    echo ""
    
    check_web_services
    echo ""
    
    check_ssl_certificates
    echo ""
    
    check_docker_services
    echo ""
    
    check_disk_space
    echo ""
    
    check_logs
    echo ""
    
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}      –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê        ${NC}"
    echo -e "${BLUE}================================${NC}"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
