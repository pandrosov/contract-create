version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: contract-postgres
    environment:
      POSTGRES_DB: contract_db
      POSTGRES_USER: contract_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5437:5432"
    restart: unless-stopped
    networks:
      - contract-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: contract-backend
    environment:
      - DATABASE_URL=postgresql://contract_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/contract_db
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://your-domain.com}
    volumes:
      - ./templates:/app/templates
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - contract-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: contract-frontend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://your-domain.com/api}
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - contract-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: contract-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - contract-network

volumes:
  postgres_data:

networks:
  contract-network:
    driver: bridge 