import React, { useEffect, useState } from 'react';
import { getFolders } from '../api/folders';
import { getTemplatesByFolder, getTemplateFields, generateDocument } from '../api/templates';
import { getSetting } from '../api/settings';
import { useAuth } from '../context/AuthContext';
import TemplateSelectorModal from '../components/TemplateSelectorModal';
import Loader from '../components/Loader';

export default function GenerateDocumentPage() {
  const { csrfToken } = useAuth();
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [templateFields, setTemplateFields] = useState([]);
  const [fieldValues, setFieldValues] = useState({});
  const [placeholderDescriptions, setPlaceholderDescriptions] = useState({});
  const [outputFormat, setOutputFormat] = useState('docx');
  const [filenameTemplate, setFilenameTemplate] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [isTemplateModalOpen, setIsTemplateModalOpen] = useState(false);
  const [helpInfo, setHelpInfo] = useState('');
  const [contractHelpInfo, setContractHelpInfo] = useState('');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadHelpInfo = async () => {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      const loadSettingSafely = async (key) => {
        try {
          const response = await getSetting(key);
          if (response.data && response.data.value) {
            return response.data.value;
          }
        } catch (error) {
          console.log(`Setting '${key}' not found or error loading:`, error);
        }
        return null;
      };

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [generalInfo, contractInfo] = await Promise.all([
        loadSettingSafely('document_help_info'),
        loadSettingSafely('contract_help_info')
      ]);

      if (generalInfo) setHelpInfo(generalInfo);
      if (contractInfo) setContractHelpInfo(contractInfo);
    };
    
    loadHelpInfo();
  }, []);

  const handleTemplateSelect = async (template) => {
    setSelectedTemplate(template);
    setLoading(true);
    setError('');
    try {
      const fields = await getTemplateFields(template.id);
      setTemplateFields(fields);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
      const initialValues = {};
      const descriptions = {};
      fields.forEach(field => {
        initialValues[field.name] = '';
        if (field.description) {
          descriptions[field.name] = field.description;
        }
      });
      setFieldValues(initialValues);
      setPlaceholderDescriptions(descriptions);
    } catch {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateDocument = async (e) => {
    e.preventDefault();
    if (!selectedTemplate) return;
    setError('');
    setSuccess('');
    setLoading(true);
    try {
      const blob = await generateDocument(selectedTemplate.id, fieldValues, outputFormat, filenameTemplate);
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
      let downloadFilename;
      if (filenameTemplate) {
        // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
        let customName = filenameTemplate;
        Object.entries(fieldValues).forEach(([key, value]) => {
          const placeholder = `{{${key}}}`;
          customName = customName.replace(new RegExp(placeholder, 'g'), value || '');
        });
        // –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        customName = customName.replace(/[<>:"/\\|?*]/g, '_').trim();
        downloadFilename = customName;
      } else {
        const baseName = selectedTemplate.filename.replace('.docx', '');
        const extension = outputFormat === 'pdf' ? '.pdf' : '.docx';
        downloadFilename = `generated_${baseName}${extension}`;
      }
      
      a.download = downloadFilename;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      setSuccess('–î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–∫–∞—á–∞–Ω');
    } catch (error) {
      console.error('Error generating document:', error);
      setError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleFieldChange = (field, value) => {
    setFieldValues(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–æ–º
  const isContractTemplate = (template) => {
    if (!template) return false;
    const filename = template.filename.toLowerCase();
    return filename.includes('–¥–æ–≥–æ–≤–æ—Ä') || filename.includes('contract') || filename.includes('agreement');
  };

  return (
    <div className="generate-document-page">
      <div className="container">
        <h1>–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞</h1>
        {error && <div className="auth-error">{error}</div>}
        {success && <div className="auth-success">{success}</div>}
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è */}
        {helpInfo && (
          <div className="help-info-section">
            <div className="help-info-header">
              <span className="help-icon">üí°</span>
              <strong>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</strong>
            </div>
            <div className="help-info-content">
              {helpInfo}
            </div>
          </div>
        )}
        
        {/* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤ */}
        {selectedTemplate && isContractTemplate(selectedTemplate) && contractHelpInfo && (
          <div className="help-info-section contract-help">
            <div className="help-info-header">
              <span className="help-icon">üìã</span>
              <strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤</strong>
            </div>
            <div className="help-info-content">
              {contractHelpInfo}
            </div>
          </div>
        )}
        
        <div className="document-generation-layout">
          {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ */}
          <div className="template-selection-panel">
            <h3>–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞</h3>
            
            <div className="form-group">
              <label>–®–∞–±–ª–æ–Ω:</label>
              <div className="template-selector">
                {selectedTemplate ? (
                  <div className="selected-template">
                    <span className="template-icon">üìÑ</span>
                    <span className="template-name">{selectedTemplate.filename}</span>
                    <button 
                      className="btn btn-secondary btn-small"
                      onClick={() => setIsTemplateModalOpen(true)}
                    >
                      –ò–∑–º–µ–Ω–∏—Ç—å
                    </button>
                  </div>
                ) : (
                  <button 
                    className="btn btn-primary"
                    onClick={() => setIsTemplateModalOpen(true)}
                  >
                    –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω
                  </button>
                )}
              </div>
            </div>

            {loading && <Loader text="–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–∞..." />}
          </div>

          {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π */}
          {selectedTemplate && (
            <div className="field-filling-panel">
              <h3>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h3>
              <div className="selected-template-info">
                <strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:</strong> {selectedTemplate.filename}
              </div>
              
              {templateFields.length > 0 ? (
                <form onSubmit={handleGenerateDocument} className="field-form">
                  {templateFields.map(field => (
                    <div key={field.name} className="form-group">
                      <label className="field-label">
                        {field.name}
                        {field.description && (
                          <span 
                            className="field-help-icon" 
                            title={field.description}
                          >
                            ‚ùì
                          </span>
                        )}
                      </label>
                      <input
                        type="text"
                        value={fieldValues[field.name] || ''}
                        onChange={e => handleFieldChange(field.name, e.target.value)}
                        className="form-control"
                        placeholder={`–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${field.name}`}
                        required
                      />
                      {field.description && (
                        <small className="field-description">
                          {field.description}
                        </small>
                      )}
                    </div>
                  ))}
                  
                  <div className="form-group">
                    <label>–®–∞–±–ª–æ–Ω –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                    <input
                      type="text"
                      value={filenameTemplate}
                      onChange={e => setFilenameTemplate(e.target.value)}
                      className="form-control"
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–≥–æ–≤–æ—Ä_{{–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞}}_{{–§–ò–û}}"
                    />
                    <small className="form-help">
                      –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ {'{{–ø–æ–ª–µ}}'} –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                    </small>
                  </div>
                  
                  <div className="form-group">
                    <label>–§–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:</label>
                    <div className="radio-options">
                      <label className="radio-option">
                        <input
                          type="radio"
                          value="docx"
                          checked={outputFormat === 'docx'}
                          onChange={e => setOutputFormat(e.target.value)}
                        />
                        <span>DOCX (Word)</span>
                      </label>
                      <label className="radio-option">
                        <input
                          type="radio"
                          value="pdf"
                          checked={outputFormat === 'pdf'}
                          onChange={e => setOutputFormat(e.target.value)}
                        />
                        <span>PDF</span>
                      </label>
                    </div>
                  </div>
                  
                  <button 
                    type="submit" 
                    disabled={loading}
                    className="btn btn-primary btn-large"
                  >
                    {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç'}
                  </button>
                </form>
              ) : (
                <div className="no-fields-message">
                  –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ */}
      <TemplateSelectorModal
        isOpen={isTemplateModalOpen}
        onClose={() => setIsTemplateModalOpen(false)}
        onSelect={handleTemplateSelect}
        selectedTemplateId={selectedTemplate?.id}
      />
    </div>
  );
} 