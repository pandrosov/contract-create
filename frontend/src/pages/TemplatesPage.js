import React, { useState, useEffect } from 'react';
import { getTemplatesByFolder, uploadTemplate, deleteTemplate } from '../api/templates';
import { getFolders } from '../api/folders';
import FileUpload from '../components/FileUpload';
import Modal from '../components/Modal';
import LoadingSpinner from '../components/LoadingSpinner';
import PlaceholderDescriptionsModal from '../components/PlaceholderDescriptionsModal';

const TemplatesPage = () => {
  const [templates, setTemplates] = useState([]);
  const [folders, setFolders] = useState([]);
  const [selectedFolder, setSelectedFolder] = useState('');
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);
  const [showDescriptionsModal, setShowDescriptionsModal] = useState(false);
  const [selectedTemplateForDescriptions, setSelectedTemplateForDescriptions] = useState(null);

  useEffect(() => {
    fetchFolders();
  }, []);

  useEffect(() => {
    if (selectedFolder) {
      fetchTemplates();
    }
  }, [selectedFolder]);

  const fetchFolders = async () => {
    try {
      const foldersData = await getFolders();
      setFolders(foldersData);
      if (foldersData.length > 0) {
        setSelectedFolder(foldersData[0].id);
      }
    } catch (error) {
      console.error('Error fetching folders:', error);
      window.showNotification?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–ø–æ–∫', 'error');
    }
  };

  const fetchTemplates = async () => {
    if (!selectedFolder) return;
    
    setLoading(true);
    try {
      const templatesData = await getTemplatesByFolder(selectedFolder);
      setTemplates(templatesData);
    } catch (error) {
      console.error('Error fetching templates:', error);
      window.showNotification?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleFileSelect = (file) => {
    setSelectedFile(file);
  };

  const handleUpload = async () => {
    if (!selectedFile || !selectedFolder) return;

    setUploading(true);
    try {
      await uploadTemplate(selectedFile, selectedFolder);
      window.showNotification?.('–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!', 'success');
      setShowUploadModal(false);
      setSelectedFile(null);
      fetchTemplates();
    } catch (error) {
      console.error('Error uploading template:', error);
      window.showNotification?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–∞', 'error');
    } finally {
      setUploading(false);
    }
  };

  const handleDelete = async (templateId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?')) return;

    try {
      await deleteTemplate(templateId);
      window.showNotification?.('–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success');
      fetchTemplates();
    } catch (error) {
      console.error('Error deleting template:', error);
      window.showNotification?.('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞', 'error');
    }
  };

  const handleOpenDescriptions = (template) => {
    setSelectedTemplateForDescriptions(template);
    setShowDescriptionsModal(true);
  };

  const handleCloseDescriptions = () => {
    setShowDescriptionsModal(false);
    setSelectedTemplateForDescriptions(null);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="page-header">
        <h1 className="page-title">–®–∞–±–ª–æ–Ω—ã</h1>
        <LoadingSpinner text="–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤..." />
      </div>
    );
  }

  return (
    <div className="templates-page">
      <div className="page-header">
        <h1 className="page-title">–®–∞–±–ª–æ–Ω—ã</h1>
        <p className="page-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>
      </div>

      <div className="card">
        <div className="card-header">
          <h2 className="card-title">–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞</h2>
          <button
            className="btn btn-primary"
            onClick={() => setShowUploadModal(true)}
          >
            <span>üìÑ</span>
            –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω
          </button>
        </div>

        <div className="form-group">
          <label htmlFor="folder-select" className="form-label">
            –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É
          </label>
          <select
            id="folder-select"
            className="form-select"
            value={selectedFolder}
            onChange={(e) => setSelectedFolder(e.target.value)}
          >
            {folders.map(folder => (
              <option key={folder.id} value={folder.id}>
                {folder.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      <div className="card">
        <div className="card-header">
          <h2 className="card-title">–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤</h2>
          <span className="card-subtitle">
            {templates.length} —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ø–∞–ø–∫–µ
          </span>
        </div>

        {templates.length === 0 ? (
          <div className="empty-state">
            <div className="empty-state-icon">üìÑ</div>
            <h3 className="empty-state-title">–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤</h3>
            <p className="empty-state-description">
              –í —ç—Ç–æ–π –ø–∞–ø–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.
            </p>
            <button
              className="btn btn-primary"
              onClick={() => setShowUploadModal(true)}
            >
              <span>üìÑ</span>
              –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω
            </button>
          </div>
        ) : (
          <div className="table-container">
            <table className="table">
              <thead>
                <tr>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                  <th>–ü–∞–ø–∫–∞</th>
                  <th>–ó–∞–≥—Ä—É–∂–µ–Ω</th>
                  <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {templates.map(template => (
                  <tr key={template.id}>
                    <td>
                      <div className="template-info">
                        <span className="template-name">{template.filename}</span>
                      </div>
                    </td>
                    <td>
                      {folders.find(f => f.id === template.folder_id)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞–ø–∫–∞'}
                    </td>
                    <td>{template.uploaded_at || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
                    <td>
                      <div className="table-actions">
                        <button
                          className="btn btn-info btn-sm"
                          onClick={() => handleOpenDescriptions(template)}
                          title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤"
                        >
                          <span>üìù</span>
                          –û–ø–∏—Å–∞–Ω–∏—è
                        </button>
                        <button
                          className="btn btn-secondary btn-sm"
                          onClick={() => window.open(`/api/templates/${template.id}/download`, '_blank')}
                        >
                          <span>‚¨áÔ∏è</span>
                          –°–∫–∞—á–∞—Ç—å
                        </button>
                        <button
                          className="btn btn-danger btn-sm"
                          onClick={() => handleDelete(template.id)}
                        >
                          <span>üóëÔ∏è</span>
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      <div className="card">
        <div className="card-header">
          <h2 className="card-title">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
        </div>
        <div className="info-content">
          <p>
            <strong>üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã:</strong>
          </p>
          <ul>
            <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ .docx —Ñ–∞–π–ª —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>{'{{FIELD_NAME}}'}</code></li>
            <li>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞</li>
            <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</li>
            <li>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –∏ —Å–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç</li>
          </ul>
        </div>
      </div>

      <Modal
        isOpen={showUploadModal}
        onClose={() => setShowUploadModal(false)}
        title="–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞"
        size="large"
      >
        <div className="upload-modal-content">
          <div className="form-group">
            <label className="form-label">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞</label>
            <FileUpload
              onFileSelect={handleFileSelect}
              accept=".docx"
              maxSize={10}
            />
          </div>

          {selectedFile && (
            <div className="selected-file">
              <p><strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:</strong> {selectedFile.name}</p>
              <p><strong>–†–∞–∑–º–µ—Ä:</strong> {(selectedFile.size / 1024 / 1024).toFixed(2)} –ú–ë</p>
            </div>
          )}

          <div className="modal-actions">
            <button
              className="btn btn-secondary"
              onClick={() => setShowUploadModal(false)}
              disabled={uploading}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              className="btn btn-primary"
              onClick={handleUpload}
              disabled={!selectedFile || uploading}
            >
              {uploading ? (
                <>
                  <div className="spinner spinner-sm"></div>
                  –ó–∞–≥—Ä—É–∑–∫–∞...
                </>
              ) : (
                <>
                  <span>üì§</span>
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å
                </>
              )}
            </button>
          </div>
        </div>
      </Modal>

      <PlaceholderDescriptionsModal
        isOpen={showDescriptionsModal}
        onClose={handleCloseDescriptions}
        template={selectedTemplateForDescriptions}
        onUpdate={() => {
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }}
      />
    </div>
  );
};

export default TemplatesPage; 